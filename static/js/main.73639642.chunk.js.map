{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortFields","goodsFromServer","prepareGoods","goods","sortBy","isReversed","goodsSorted","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","sortGoods","reverse","App","useState","DEFAULT","setSortBy","setIsReversed","isShowResetButton","visibleGoods","resetButton","type","className","onClick","cn","currentSsReversed","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,4EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA+BF,SAASC,EACPC,EADF,GAGG,IADCC,EACF,EADEA,OAAQC,EACV,EADUA,WAEJC,EAAc,YAAIH,GACrBI,MAAK,SAACC,EAAOC,GAAR,OAtBV,SACED,EACAC,EACAL,GAEA,OAAQA,GACN,KAAMJ,EAAWU,SACf,OAAOF,EAAMG,cAAcF,GAE7B,KAAMT,EAAWY,OACf,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,GASeC,CAAUN,EAAOC,EAAOL,MAMlD,OAJIC,GACFC,EAAYS,UAGPT,G,SAvCJN,K,WAAAA,E,oBAAAA,E,iBAAAA,M,KA0CE,IAAMgB,EAAgB,WAC3B,MAA4BC,mBAAqBjB,EAAWkB,SAA5D,mBAAOd,EAAP,KAAee,EAAf,KACA,EAAoCF,oBAAkB,GAAtD,mBAAOZ,EAAP,KAAmBe,EAAnB,KACMC,EAAoBjB,GAAUC,EAC9BiB,EAAepB,EAAaD,EAAiB,CAAEG,SAAQC,eAO7D,IAAMkB,EACJ,wBACEC,KAAK,SACLC,UAAU,4BACVC,QAAS,kBARXP,EAAUnB,EAAWkB,cACrBE,GAAc,IAId,mBASF,OACE,sBAAKK,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACED,KAAK,SACLC,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYvB,IAAWJ,EAAWU,WAEpCgB,QAAS,kBAAMP,EAAUnB,EAAWU,WALtC,iCAUA,wBACEc,KAAK,SACLC,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYvB,IAAWJ,EAAWY,SAEpCc,QAAS,kBAAMP,EAAUnB,EAAWY,SALtC,4BAUA,wBACEY,KAAK,SACLC,UAAWE,IAAG,SAAU,aAAc,CACpC,YAAatB,IAEfqB,QAAS,kBAAMN,GAAc,SAAAQ,GAAiB,OAAKA,MALrD,qBAUCP,GAAqBE,KAGxB,6BACGD,EAAaO,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCpHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.73639642.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport cn from 'classnames';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortFields {\n  DEFAULT = '',\n  ALPHABET = 'alphabet',\n  LENGTH = 'length',\n}\n\ninterface PrepareParams {\n  sortBy: SortFields,\n  isReversed : boolean,\n}\n\nfunction sortGoods(\n  good1: string,\n  good2: string,\n  sortBy: SortFields,\n) {\n  switch (sortBy) {\n    case (SortFields.ALPHABET):\n      return good1.localeCompare(good2);\n\n    case (SortFields.LENGTH):\n      return good1.length - good2.length;\n\n    default:\n      return 0;\n  }\n}\n\nfunction prepareGoods(\n  goods: string[],\n  { sortBy, isReversed }: PrepareParams,\n) {\n  const goodsSorted = [...goods]\n    .sort((good1, good2) => sortGoods(good1, good2, sortBy));\n\n  if (isReversed) {\n    goodsSorted.reverse();\n  }\n\n  return goodsSorted;\n}\n\nexport const App: React.FC = () => {\n  const [sortBy, setSortBy] = useState<SortFields>(SortFields.DEFAULT);\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n  const isShowResetButton = sortBy || isReversed;\n  const visibleGoods = prepareGoods(goodsFromServer, { sortBy, isReversed });\n\n  function handleResetClick() {\n    setSortBy(SortFields.DEFAULT);\n    setIsReversed(false);\n  }\n\n  const resetButton = (\n    <button\n      type=\"button\"\n      className=\"button is-danger is-light\"\n      onClick={() => handleResetClick()}\n    >\n      Reset\n    </button>\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortBy !== SortFields.ALPHABET,\n          })}\n          onClick={() => setSortBy(SortFields.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortBy !== SortFields.LENGTH,\n          })}\n          onClick={() => setSortBy(SortFields.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed(currentSsReversed => !currentSsReversed)}\n        >\n          Reverse\n        </button>\n\n        {isShowResetButton && resetButton}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}